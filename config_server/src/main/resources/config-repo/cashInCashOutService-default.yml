spring:
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: guest
    password: guest
  kafka:
    template:
      observation-enabled: true
    bootstrap-servers: ${BOOTSTRAP_SERVERS_KAFKA:localhost:9092}
    producer:
      bootstrap-servers: ${BOOTSTRAP_SERVERS_KAFKA:localhost:9092}
      properties:
        spring:
          json:
            add:
              type:
                headers: false
        acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    admin:
      client-id: myapp
    properties:
      security.protocol: PLAINTEXT
  main:
    allow-bean-definition-overriding:
      true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri:  http://keycloak:8080/realms/master
management:
  zipkin:
    tracing:
      endpoint: http://zipkin:9411/api/v2/spans # Эндпойнт Zipkin для приема спанов
  tracing:
    sampling:
      probability: 1 # Сэмплируем все запросы
  endpoints:
    web:
      exposure:
        include: refresh,busrefresh,busshutdown,health,info
  endpoint:
    health:
      show-details: always
eureka:
  instance:
    hostname: localhost
    prefer-ip-address: true
  client:
    serviceUrl:
      defaultZone: http://eureka-service-discovery:8761/eureka/

logging:
  level:
    org:
      springframework:
        web:
          filter:
            CommonsRequestLoggingFilter: DEBUG