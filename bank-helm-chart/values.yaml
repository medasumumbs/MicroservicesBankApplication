# Global values (if any)
global:
  domain: myapp.local # Example domain for ingress
  #keycloakIssuerUri: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/master"

# Configuration for the ui-service subchart
# NOTE: For local development (Minikube/Kind/Docker Desktop), build the image locally
# (e.g., `docker build -t ui-service:0.0.1-SNAPSHOT .` in ui-service dir)
# and ensure your K8s cluster can access local images (e.g., `minikube docker-env` or `kind load docker-image ...`).
ui-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: ui-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8087
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /uiService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]

antifraud-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: antifraud-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8096
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /antifraudService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]


cash-in-cash-out-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: cash-in-cash-out-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8095
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /cashInCashOutService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]

exchange-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: exchange-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8093
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /currencyExchangeService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-notifications-db:5432/notifications"
    database_username: "myuser"

exchange-generation-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: exchange-generation-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8092
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /exchangeGenerationService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]

gateway-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: gateway-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8080
  gatewayUrl: "http://ingress-nginx-controller.ingress-nginx.svc.cluster.local"

notifications-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: notifications-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8081
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /notificationsService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-notifications-db:5432/notifications"
    database_username: "myuser"


transfer-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: transfer-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8100
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /transferService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]


# Configuration for the accounts-service subchart
# NOTE: Build image locally: `docker build -t accounts-service:0.0.1-SNAPSHOT .` in accounts-service dir
accounts-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: accounts-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8087
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: ingress-gateway.myapp.local
        paths:
          - path: /accountsService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-notifications-db:5432/notifications"
    database_username: "myuser"

# Configuration for the customer-db (PostgreSQL dependency)
# Values here are prefixed according to the Bitnami PostgreSQL chart's structure
# Check the Bitnami chart's values.yaml for all available options
notifications-db:
  enabled: true
  # Override values from the official postgresql chart
  auth:
    database: notifications
    username: myuser
    # Use existingSecret or provide password (less secure for production)
    # existingSecret: "{{ .Release.Name }}-customer-db-postgresql" # Name of the secret to use/create
    password: "mysecret" # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi # Small size for example
keycloak:
  httpRelativePath: "/"
  hostname: localhost
  production: false
  tls:
    enabled: false
  auth:
    adminPassword: 123
    adminUser: admin
  service:
    type: ClusterIP
    ports:
      http: 8080
  enabled: true
  externalDatabase:
    host: myapp-notifications-db
    port: 5432
    user: myuser
    password: mysecret
    database: notifications
  postgresql:
    enabled: false
  extraArgs:
    - --import-realm
  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config
  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: --import-realm

gatewayIngress:
  enabled: true
  host: "ingress-gateway.myapp.local"
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
  services:
    - name: accounts-service
      path: /accountsService(/|$)(.*)
      backend:
        service: accounts-service
        port: 8084

    - name: antifraud-service
      path: /antifraudService(/|$)(.*)
      backend:
        service: antifraud-service
        port: 8096

    - name: cash-in-cash-out-service
      path: /cashInCashOutService(/|$)(.*)
      backend:
        service: cash-in-cash-out-service
        port: 8095

    - name: exchange-service
      path: /currencyExchangeService(/|$)(.*)
      backend:
        service: exchange-service
        port: 8093

    - name: exchange-generation-service
      path: /exchangeGenerationService(/|$)(.*)
      backend:
        service: exchange-generation-service
        port: 8092

    - name: notifications-service
      path: /notificationsService(/|$)(.*)
      backend:
        service: notifications-service
        port: 8081

    - name: transfer-service
      path: /transferService(/|$)(.*)
      backend:
        service: transfer-service
        port: 8100

    - name: ui-service
      path: /uiService(/|$)(.*)
      backend:
        service: ui-service
        port: 8087

    - name: gateway-service
      path: /gatewayService(/|$)(.*)
      backend:
        service: gateway-service
        port: 8080

kafka:
  service:
    enabled: true
    type: ClusterIP
    port: 9092
    name: myapp-kafka-broker
  enabled: true
  broker:
    replicaCount: 1
    persistence:
      size: 1Gi
  kraft:
    enabled: true
  listeners:
    client:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
    interbroker:
      protocol: PLAINTEXT
