# Global values (if any)
global:
  domain: myapp.local # Example domain for ingress

# Configuration for the ui-service subchart
# NOTE: For local development (Minikube/Kind/Docker Desktop), build the image locally
# (e.g., `docker build -t ui-service:0.0.1-SNAPSHOT .` in ui-service dir)
# and ensure your K8s cluster can access local images (e.g., `minikube docker-env` or `kind load docker-image ...`).
ui-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: ui-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8087
  ingress:
    enabled: true
    className: "nginx" # Specify your ingress controller class
    hosts:
      - host: customer.myapp.local # Use global domain or specific
        paths:
          - path: /
            pathType: ImplementationSpecific


antifraud-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: antifraud-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8096
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific


cash-in-cash-out-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: cash-in-cash-out-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8095
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific

exchange-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: exchange-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8093
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-notifications-db:5432/notifications"
    database_username: "myuser"

exchange-generation-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: exchange-generation-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8092
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific

gateway-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: gateway-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific

notifications-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: notifications-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8081
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-notifications-db:5432/notifications"
    database_username: "myuser"


transfer-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: transfer-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8100
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific


# Configuration for the accounts-service subchart
# NOTE: Build image locally: `docker build -t accounts-service:0.0.1-SNAPSHOT .` in accounts-service dir
accounts-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: accounts-service # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8087
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-notifications-db:5432/notifications"
    database_username: "myuser"

# Configuration for the customer-db (PostgreSQL dependency)
# Values here are prefixed according to the Bitnami PostgreSQL chart's structure
# Check the Bitnami chart's values.yaml for all available options
notifications-db:
  enabled: true
  # Override values from the official postgresql chart
  auth:
    database: notifications
    username: myuser
    # Use existingSecret or provide password (less secure for production)
    # existingSecret: "{{ .Release.Name }}-customer-db-postgresql" # Name of the secret to use/create
    password: "mysecret" # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi # Small size for example
keycloak:
  enabled: true

  # Настройка initScripts
  initScripts:
    realm-export.json: |
      {
        "realm": "master",
        "enabled": true,
        "attributes": {
          "frontendUrl": "http://keycloak:8080"
        },
        "clients": [
          {
            "clientId": "cashInCashOutService",
            "secret": "F3PnrhRuMtxh30N67vgxAkOJqY3KYpwW",
            "redirectUris": ["*"],
            "webOrigins": [],
            "directAccessGrantsEnabled": true,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": true,
            "serviceAccountsEnabled": true,
            "publicClient": false,
            "authorizationServicesEnabled": true,
            "defaultClientScopes": ["openid", "profile"],
            "optionalClientScopes": []
          }
        ]
      }
# values.yaml

#postgresql:
#  enabled: true
  #global:
  #  storageClass: standard
  #auth:
    #postgresPassword: "postgres"
    #username: "myuser"
    #password: "mysecret"
    #database: "notifications"