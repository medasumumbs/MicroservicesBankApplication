services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - kafkaNet

  notifications-db:
    env_file:
      .env
    image: postgres:16
    container_name: notifications-db
    environment:
      POSTGRES_DB: ${NOTIFICATIONS_SERVICE_DB_NAME}
      POSTGRES_USER: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      POSTGRES_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${NOTIFICATIONS_SERVICE_DB_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafkaNet

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: 123
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
    networks:
      - kafkaNet
    volumes:
      - ./realm-config.json:/opt/keycloak/data/import/realm-config.json
    command: start-dev --import-realm
    ports:
      - "7980:8080"

  config_server:
    hostname: config-server
    env_file:
      .env
    build:
      context: ./config_server
      dockerfile: Dockerfile
    ports:
      - "${CONFIG_PORT}:${CONFIG_PORT}"
    environment:
      CONFIG_SERVER_PORT: ${CONFIG_PORT}
    networks:
      - kafkaNet
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:${CONFIG_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-service-discovery:
    build:
      context: ./eureka_service_discovery
      dockerfile: Dockerfile
    ports:
      - "${EUREKA_PORT}:${EUREKA_PORT}"
    environment:
      EUREKA_PORT: ${EUREKA_PORT}
    depends_on:
      config_server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:${EUREKA_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafkaNet


  notifications-service:
    env_file:
      .env
    build:
      context: ./notifications_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8081:8081"
    depends_on:
      notifications-db:
          condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet

  accounts-service:
    env_file:
      .env
    build:
      context: ./accounts_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8084:8084"
    depends_on:
      notifications-db:
        condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet

  transfer-service:
    env_file:
      .env
    build:
      context: ./transfer_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8100:8100"
    depends_on:
      notifications-db:
        condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet

  cash_in_cash_out-service:
    env_file:
      .env
    build:
      context: ./cash_in_cash_out_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8095:8095"
    depends_on:
      notifications-db:
        condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet

  ui-service:
    env_file:
      .env
    build:
      context: ./ui_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8087:8087"
    depends_on:
      notifications-db:
        condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet


  exchange-generation-service:
    env_file:
      .env
    build:
      context: ./exchange_generator_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      BOOTSTRAP_SERVERS_KAFKA: ${BOOTSTRAP_SERVERS_KAFKA}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8092:8092"
    depends_on:
      notifications-db:
        condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet


  exchange-service:
    env_file:
      .env
    build:
      context: ./currency_exchange_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8093:8093"
    depends_on:
      notifications-db:
        condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet

  gateway-service:
    env_file:
      .env
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    ports:
      - "8072:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: myapp.kafka.ru:9092
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    networks:
      - kafkaNet
  antifraud-service:
    env_file:
      .env
    build:
      context: ./antifraud_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notifications-db:5432/${NOTIFICATIONS_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${NOTIFICATIONS_SERVICE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      NOTIFICATIONS_SERVICE_PORT: 8081
      EUREKA_PORT: ${EUREKA_PORT}
    ports:
      - "8096:8096"
    depends_on:
      notifications-db:
        condition: service_healthy
      config_server:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
    networks:
      - kafkaNet
  kafka:
    image: bitnami/kafka
    container_name: kafka
    hostname: myapp.kafka.ru
    ports:
      - "9092:9092"
      - "9093:9093"
    expose:
      - "9093"
    env_file:
      - ./configForKafka/kafka.env
    volumes:
      - ./configForKafka/server.properties:/opt/bitnami/kafka/config/server.properties
      - ./configForKafka/producer.properties:/opt/bitnami/kafka/config/producer.properties
      - ./configForKafka/consumer.properties:/opt/bitnami/kafka/config/consumer.properties
    networks:
      - kafkaNet

  zipkin:
    image: openzipkin/zipkin:3.5
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      STORAGE_TYPE: mem
      KAFKA_BOOTSTRAP_SERVERS: myapp.kafka.ru
      KAFKA_TOPIC: zipkin
    networks:
      - kafkaNet

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus:/etc/prometheus/
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - kafkaNet

  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - kafkaNet
  elasticsearch:
    env_file:
      .env
    image: docker.io/elastic/elasticsearch:8.13.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - kafkaNet
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
  elasticsearch-init:
    image: appropriate/curl
    command:
      - sh
      - -c
      - |
        until curl -s http://elasticsearch:9200; do echo "Waiting for Elasticsearch..."; sleep 5; done

        curl -X PUT "http://elasticsearch:9200/_index_template/logs_template" \
             -H "Content-Type: application/json" \
             -d @/templates/logs-template.json
    volumes:
      - ./elasticsearch/config/logs-template.json:/templates/logs-template.json
    networks:
      - kafkaNet

  logstash:
    env_file:
      .env
    image: docker.io/elastic/logstash:8.13.3
    container_name: logstash
    environment:
      - LOGSTASH_OUTPUT_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - kafka
      - elasticsearch
      - elasticsearch-init
    networks:
      - kafkaNet

  kibana:
    image: docker.io/elastic/kibana:8.13.3
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
      - elasticsearch-init
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - kafkaNet
networks:
  kafkaNet:
    driver: bridge
    name: kafkaNet
    external: true